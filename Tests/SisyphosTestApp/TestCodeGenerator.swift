#!/usr/bin/env xcrun --sdk macosx swift
import Foundation

let directory = URL(fileURLWithPath: #filePath).deletingLastPathComponent()
var contents: String = ""

let enumerator = FileManager.default.enumerator(
    at: directory.appending(path: "SisyphosTests"),
    includingPropertiesForKeys: [],
    options: [.skipsHiddenFiles, .skipsPackageDescendants]
)!
for case let fileUrl as URL in enumerator {
    guard fileUrl.lastPathComponent.hasSuffix("Tests.swift") else {
        print("Skipping \(fileUrl.lastPathComponent)")
        continue
    }
    print("parsing \(fileUrl.lastPathComponent)")
    var parser = Parser(fileUrl: fileUrl)
    parser.parse()
    contents.append(parser.generatedCode)
}

try! """
     /// ⚠️ AUTOGENERATED CODE. DO NOT EDIT.
     import SwiftUI
     import Photos


     func registerTestViews() {
        \(contents)
     }
     """.write(to: URL(fileURLWithPath: "\(directory.path)/SisyphosTestapp/Generated.swift"), atomically: true, encoding: .utf8)

struct Scanner {
    let contents: String
    let lastIndex: String.Index
    var index: String.Index

    init(contents: String) {
        self.contents = contents
        self.index = contents.startIndex
        self.lastIndex = contents.index(before: contents.endIndex)
    }

    mutating func next() -> Character? {
        guard let nextIndex = contents.index(index, offsetBy: 1, limitedBy: lastIndex) else {
            return nil
        }
        index = nextIndex
        return contents[nextIndex]
    }

    func peek(n: Int) -> Substring {
        guard let startIndex = contents.index(index, offsetBy: 1, limitedBy: lastIndex) else {
            return contents[index..<contents.endIndex]
        }
        guard let stopIndex = contents.index(index, offsetBy: n + 1, limitedBy: lastIndex) else {
            return contents[index..<contents.endIndex]
        }

        return contents[startIndex..<stopIndex]
    }

    mutating func seek(n: Int) {
        guard let stopIndex = contents.index(index, offsetBy: n, limitedBy: contents.endIndex) else {
            index = lastIndex
            return assertionFailure()
        }
        index = stopIndex
    }
}


struct Parser {
    enum Context {
        case searching
        case collecting
    }

    let fileUrl: URL

    var reader: Scanner
    var currentLine = 1
    var start = 1
    var currentViewSource = [Character]() {
        didSet { assert(context == .collecting) }
    }
    var context = Context.searching
    var curlyBracketsOpened: Int = 0 {
        didSet { assert(context == .collecting) }
    }

    var generatedCode = ""

    init(fileUrl: URL) {
        self.fileUrl = fileUrl
        let fileContents = try! String(String(contentsOf: fileUrl))
        self.reader = Scanner(contents: fileContents)
    }

    mutating func parse() {
        parsingLoop: while let character = reader.next() {
            switch character {
            case "l":
                let needed = "aunchTestApp"
                guard reader.peek(n: needed.count) == needed else { break }
                assert(curlyBracketsOpened == 0)
                // It can be `launchTestApp {` or `launchTestApp(swiftUI: {`, so we search until {.
                // If we don't find an opening curly bracket, we roll back by using the previous state of the reader.
                let originalReader = reader
                while let character = reader.next() {
                    switch character {
                    case "\n":
                        currentLine += 1
                    case "{":
                        context = .collecting
                        start = currentLine
                        continue parsingLoop
                    default:
                        continue
                    }
                }
                reader = originalReader
            case "{" where context == .collecting:
                curlyBracketsOpened += 1
            case "}" where context == .collecting:
                guard curlyBracketsOpened == 0 else {
                    curlyBracketsOpened -= 1
                    break
                }
                generatedCode.append(
                """
                collect(fileName: "\(fileUrl.path.deletingPrefix(directory.path))", line: \(start)) {
                    \(String(currentViewSource))
                }

                """
                )
                currentViewSource = []
                context = .searching
            case "\n":
                currentLine += 1
            default:
                break
            }
            if context == .collecting {
                currentViewSource.append(character)
            }
        }
    }
}

extension String {
    func deletingPrefix(_ prefix: String) -> String {
        guard self.hasPrefix(prefix) else {
            assertionFailure()
            return self
        }
        return String(self.dropFirst(prefix.count))
    }
}
